generator client {
  provider = "prisma-client-js"
  output   = "prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_permissions {
  id          Int    @id @default(autoincrement())
  user_id     Int?
  permissions Json?
  users       users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_permissions_ibfk_1")

  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([user_id], map: "user_id")
}

model users {
  id               Int                @id @default(autoincrement())
  username         String             @unique(map: "username") @db.VarChar(255)
  email            String             @unique(map: "email") @db.VarChar(255)
  password         String             @db.VarChar(255)
  avatarId         Int?
  scrapes          scrapes[]
  user_permissions user_permissions[]
  tasks            tasks[]
  emails           emails[]
  uploads          uploads[]

  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
}

model scrapes {
  id       Int    @id @default(autoincrement())
  task_uid String @unique @db.VarChar(100)
  user_id  Int?
  url      String @db.VarChar(500)
  result   Json?

  task  tasks  @relation(fields: [task_uid], references: [uid])
  users users? @relation(fields: [user_id], references: [id])

  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([user_id])
}

model emails {
  id       Int       @id @default(autoincrement())
  task_uid String    @unique @db.VarChar(100)
  user_id  Int?
  to       String    @db.VarChar(255)
  from     String    @db.VarChar(255)
  subject  String    @db.VarChar(255)
  body     String?   @db.Text
  sent_at  DateTime? @db.Timestamp(0)

  task  tasks  @relation(fields: [task_uid], references: [uid])
  users users? @relation(fields: [user_id], references: [id])

  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([user_id])
}

model tasks {
  id          Int       @id @default(autoincrement())
  uid         String    @unique @db.VarChar(100)
  type        String    @db.VarChar(100)
  status      String    @default("pending") @db.VarChar(50)
  data        Json?
  error       String?   @db.VarChar(1000)
  started_at  DateTime? @db.Timestamp(0)
  finished_at DateTime? @db.Timestamp(0)

  scrapes scrapes[]
  emails  emails[]
  usersId Int?
  users   users?    @relation(fields: [usersId], references: [id])

  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
}

model uploads {
  id         Int     @id @default(autoincrement())
  uid        String  @unique @db.VarChar(100)
  user_id    Int?
  type       String // e.g., 'avatar', 'cv', 'post_attachment' used for post processing
  filename   String
  filepath   String
  publicpath String
  mimetype   String?
  size       Int?
  user       users?  @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
}
